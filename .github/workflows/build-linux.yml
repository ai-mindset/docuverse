name: Build Linux AppImage

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - 'v*'  # Also run when a tag is pushed that starts with 'v'

permissions:
  contents: write
  packages: read
  
jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y fuse libfuse2 imagemagick
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
      
      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e .
          uv pip install "pyinstaller>=6.1.0" toml
      
      - name: Verify prompts directory
        run: |
          if [ ! -d "prompts" ]; then
            echo "ERROR: prompts directory not found in repository"
            exit 1
          fi
          echo "Prompts directory exists with contents:"
          ls -la prompts/
      
      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          source .venv/bin/activate
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version: $VERSION"
      
      - name: Build with PyInstaller
        run: |
          source .venv/bin/activate
          
          # Create simple one-file spec
          cat > docuverse.spec << EOF
          # -*- mode: python ; coding: utf-8 -*-
          import os
          from PyInstaller.utils.hooks import collect_all

          block_cipher = None

          # Collect dependencies
          pydantic_datas, pydantic_binaries, pydantic_hiddenimports = collect_all('pydantic')
          langchain_datas, langchain_binaries, langchain_hiddenimports = collect_all('langchain_ollama')
          
          # Recursively include all files from prompts directory
          prompts_files = []
          for root, dirs, files in os.walk('prompts'):
              for file in files:
                  file_path = os.path.join(root, file)
                  prompts_files.append((file_path, os.path.dirname(file_path)))

          a = Analysis(
              ['src/dv/main.py'],
              pathex=[],
              binaries=[*pydantic_binaries, *langchain_binaries],
              datas=[
                  *prompts_files,
                  ('docs', 'docs'),
                  ('db', 'db'),
                  *pydantic_datas,
                  *langchain_datas,
              ],
              hiddenimports=[
                  *pydantic_hiddenimports,
                  *langchain_hiddenimports,
                  'numpy',
                  'ollama',
              ],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=[],
              cipher=block_cipher,
          )

          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.zipfiles,
              a.datas,
              name='docuverse',
              debug=False,
              strip=False,
              upx=True,
              console=True,
              disable_windowed_traceback=False,
              argv_emulation=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
          )
          EOF
          
          # Build with PyInstaller
          python -m PyInstaller --clean docuverse.spec
          
          # Verify the build includes prompts directory
          find dist -name "*.md" | grep prompts || echo "No prompts found in bundle"
      
      - name: Create AppDir
        run: |
          # Create basic AppDir structure
          mkdir -p AppDir/usr/{bin,share/{applications,icons/hicolor/256x256/apps}}
          
          # Copy the binary
          cp dist/docuverse AppDir/usr/bin/
          chmod +x AppDir/usr/bin/docuverse
          
          # Create icon
          convert -size 256x256 xc:transparent -fill blue -draw "circle 128,128 128,64" -fill white -pointsize 24 -gravity center -annotate 0 "DV" AppDir/docuverse.png
          cp AppDir/docuverse.png AppDir/usr/share/icons/hicolor/256x256/apps/
          cp AppDir/docuverse.png AppDir/.DirIcon
          
          # Create desktop file
          cat > AppDir/usr/share/applications/docuverse.desktop << EOF
          [Desktop Entry]
          Name=dv
          Comment=Q&A app for documents
          Exec=docuverse
          Icon=docuverse
          Terminal=false
          Type=Application
          Categories=Utility;Education;
          EOF
          cp AppDir/usr/share/applications/docuverse.desktop AppDir/docuverse.desktop
          
          # Create AppRun script
          cat > AppDir/AppRun << EOF
          #!/bin/bash
          HERE="\$(dirname "\$(readlink -f "\${0}")")"
          export PATH="\${HERE}/usr/bin:\${PATH}"
          "\${HERE}/usr/bin/docuverse" "\$@"
          EOF
          chmod +x AppDir/AppRun
      
      - name: Build AppImage
        run: |
          ARCH=x86_64 ./appimagetool AppDir "dv-${{ env.VERSION }}-x86_64.AppImage"
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docuverse-linux
          path: dv-${{ env.VERSION }}-x86_64.AppImage
      
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: dv-${{ env.VERSION }}-x86_64.AppImage
          name: dv ${{ env.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
