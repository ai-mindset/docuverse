name: Build Linux AppImage

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - 'v*'  # Also run when a tag is pushed that starts with 'v'

permissions:
  contents: write
  packages: read
  
jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y fuse libfuse2 imagemagick
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
      
      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e .
          uv pip install "pyinstaller>=6.1.0" toml
      
      - name: Prepare directories
        run: |
          # Create required directories if they don't exist
          mkdir -p docs
          mkdir -p db
          
      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          source .venv/bin/activate
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version: $VERSION"
      
      - name: Build with PyInstaller
        run: |
          source .venv/bin/activate
          
          # Create simple one-file spec
          cat > docuverse.spec << EOF
          # -*- mode: python ; coding: utf-8 -*-
          import os
          import sys
          from PyInstaller.utils.hooks import collect_all

          block_cipher = None

          # Collect dependencies
          pydantic_datas, pydantic_binaries, pydantic_hiddenimports = collect_all('pydantic')
          langchain_datas, langchain_binaries, langchain_hiddenimports = collect_all('langchain_ollama')
          langchain_core_datas, langchain_core_binaries, langchain_core_hiddenimports = collect_all('langchain_core')
          
          # Ensure that docs and db directories exist
          os.makedirs('docs', exist_ok=True)
          os.makedirs('db', exist_ok=True)

          a = Analysis(
              ['src/dv/main.py'],
              pathex=[],
              binaries=[*pydantic_binaries, *langchain_binaries, *langchain_core_binaries],
              datas=[
                  ('docs', 'docs'),
                  ('db', 'db'),
                  *pydantic_datas,
                  *langchain_datas,
                  *langchain_core_datas,
              ],
              hiddenimports=[
                  *pydantic_hiddenimports,
                  *langchain_hiddenimports,
                  *langchain_core_hiddenimports,
                  'numpy',
                  'ollama',
                  'langchain_community.vectorstores',
                  'langchain_community.embeddings',
              ],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=[],
              cipher=block_cipher,
          )

          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.zipfiles,
              a.datas,
              [],
              name='docuverse-${{ env.VERSION }}-linux',
              debug=False,
              strip=False,
              upx=True,
              console=True,
              disable_windowed_traceback=False,
              argv_emulation=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
          )
          EOF

      - name: Build with PyInstaller
        run: |
          source .venv/bin/activate
          # Build with verbose output and clean build directory
          python -m PyInstaller --clean docuverse.spec
      
      - name: Verify built binary
        run: |
          # Check if binary was created successfully
          if [ ! -f "dist/docuverse-${{ env.VERSION }}-linux" ]; then
            echo "ERROR: PyInstaller failed to create the binary!"
            exit 1
          fi
          
          # Check some basic properties of the binary
          file "dist/docuverse-${{ env.VERSION }}-linux"
          
          # Run ldd to check library dependencies
          ldd "dist/docuverse-${{ env.VERSION }}-linux" || true
          
      - name: Create AppDir structure
        run: |
          # Create basic AppDir structure
          mkdir -p AppDir/usr/{bin,share/{applications,icons/hicolor/256x256/apps}}
          
          # Copy the binary
          cp dist/docuverse AppDir/usr/bin/
          chmod +x AppDir/usr/bin/docuverse
          
          # Create icon
          convert -size 256x256 xc:transparent -fill blue -draw "circle 128,128 128,64" -fill white -pointsize 24 -gravity center -annotate 0 "DV" AppDir/docuverse.png
          cp AppDir/docuverse.png AppDir/usr/share/icons/hicolor/256x256/apps/
          cp AppDir/docuverse.png AppDir/.DirIcon
          
          # Create desktop file
          cat > AppDir/usr/share/applications/docuverse.desktop << EOF
          [Desktop Entry]
          Name=docuverse
          Comment=Q&A app for easy information retrieval from documents
          Exec=docuverse
          Icon=docuverse
          Terminal=false
          Type=Application
          Categories=Utility;Education;Office;
          EOF
          cp AppDir/usr/share/applications/docuverse.desktop AppDir/docuverse.desktop
          
          # Create AppRun script
          cat > AppDir/AppRun << EOF
          #!/bin/bash
          HERE="\$(dirname "\$(readlink -f "\${0}")")"
          export PATH="\${HERE}/usr/bin:\${PATH}"
          "\${HERE}/usr/bin/docuverse" "\$@"
          EOF
          chmod +x AppDir/AppRun
      
      - name: Build AppImage
        run: |
          # Set the architecture explicitly
          ARCH=x86_64 ./appimagetool AppDir "docuverse-${{ env.VERSION }}-x86_64.AppImage"
      
      - name: Test AppImage
        run: |
          # Make AppImage executable
          chmod +x docuverse-${{ env.VERSION }}-x86_64.AppImage
          
          # Extract AppImage to verify contents (without running)
          ./docuverse-${{ env.VERSION }}-x86_64.AppImage --appimage-extract
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docuverse-linux
          path: docuverse-${{ env.VERSION }}-x86_64.AppImage
          
      - name: Set release info
        id: release_info
        run: |
          # Get current date for development builds
          CURRENT_DATE=$(date +%Y%m%d-%H%M%S)
          
          # For tag-based releases
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "IS_TAG=true" >> $GITHUB_ENV
            echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
            echo "RELEASE_NAME=docuverse ${{ env.VERSION }}" >> $GITHUB_ENV
            echo "SHOULD_RELEASE=true" >> $GITHUB_ENV
            echo "Running on tag: $GITHUB_REF, tag name: ${GITHUB_REF#refs/tags/}"
          # For pull requests
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            PR_NUMBER=$(echo $GITHUB_REF | cut -d'/' -f3)
            echo "IS_TAG=false" >> $GITHUB_ENV
            # Don't try to create a release or tag for PRs, but upload to artifacts
            echo "SHOULD_RELEASE=false" >> $GITHUB_ENV
            echo "Running on PR: $GITHUB_REF, PR number: $PR_NUMBER"
          # For push to main
          else
            echo "IS_TAG=false" >> $GITHUB_ENV
            echo "TAG_NAME=dev-${CURRENT_DATE}" >> $GITHUB_ENV
            echo "RELEASE_NAME=docuverse ${{ env.VERSION }} (Development Build)" >> $GITHUB_ENV
            echo "PRERELEASE=true" >> $GITHUB_ENV
            echo "SHOULD_RELEASE=true" >> $GITHUB_ENV
            echo "Running on branch: $GITHUB_REF"
          fi
      
      - name: Generate release notes
        if: env.SHOULD_RELEASE == 'true'
        run: |
          cat > release_notes.md << EOF
          # docuverse Q&A App Release v${{ env.VERSION }}
          
          This release provides the Linux AppImage for docuverse, a Q&A application for easy information retrieval from documents of interest.
          
          ## Installation
          1. Download the AppImage
          2. Make it executable: \`chmod +x docuverse-${{ env.VERSION }}-x86_64.AppImage\`
          3. Run it: \`./docuverse-${{ env.VERSION }}-x86_64.AppImage\`
          EOF
          
          if [[ $GITHUB_REF != refs/tags/* ]]; then
            cat >> release_notes.md << EOF
          
          ## Development Build
          This is an automated development build, not an official release.
          - Build triggered by: $GITHUB_REF
          - Build date: $(date)
          - Commit: $GITHUB_SHA
          EOF
          fi
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: docuverse-${{ env.VERSION }}-x86_64.AppImage
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
