name: Combined Release

on:
  workflow_run:
    workflows: ["Build Windows Executable", "Build Linux AppImage"]
    types:
      - completed
    branches: [main]

permissions:
  contents: write
  packages: read
  actions: read

jobs:
  check-workflows:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
    
    steps:
      - name: Check workflow statuses
        id: check
        run: |
          echo "Checking workflow statuses..."
          
          # Get recent workflow runs for Windows by workflow name
          WINDOWS_STATUS=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows" | \
            jq -r '.workflows[] | select(.name=="Build Windows Executable") | .id' | \
            xargs -I{} curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/{}/runs?branch=main&per_page=1" | \
            jq -r '.workflow_runs[0].conclusion')
          
          # Get recent workflow runs for Linux by workflow name
          LINUX_STATUS=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows" | \
            jq -r '.workflows[] | select(.name=="Build Linux AppImage") | .id' | \
            xargs -I{} curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/{}/runs?branch=main&per_page=1" | \
            jq -r '.workflow_runs[0].conclusion')
          
          echo "Windows build status: $WINDOWS_STATUS"
          echo "Linux build status: $LINUX_STATUS"
          
          # Check if both are successful
          if [[ "$WINDOWS_STATUS" == "success" && "$LINUX_STATUS" == "success" ]]; then
            echo "Both workflows have completed successfully"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "Not all workflows have completed successfully"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  release:
    needs: check-workflows
    if: needs.check-workflows.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install toml
        run: pip install toml
      
      - name: Extract version from pyproject.toml
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version: $VERSION"
      
      - name: Set release tag
        run: |
          # Get current date for development builds
          CURRENT_DATE=$(date +%Y%m%d-%H%M%S)
          
          # For tag-based releases
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
            echo "RELEASE_NAME=docuverse ${{ env.VERSION }}" >> $GITHUB_ENV
            echo "PRERELEASE=false" >> $GITHUB_ENV
          else
            echo "TAG_NAME=v${{ env.VERSION }}-${CURRENT_DATE}" >> $GITHUB_ENV
            echo "RELEASE_NAME=docuverse ${{ env.VERSION }} (Development Build)" >> $GITHUB_ENV
            echo "PRERELEASE=true" >> $GITHUB_ENV
          fi

      - name: Find and download artifacts
        run: |
          echo "Finding latest artifacts..."
          
          # Find latest successful Windows workflow
          WINDOWS_RUN_ID=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows" | \
            jq -r '.workflows[] | select(.name=="Build Windows Executable") | .id' | \
            xargs -I{} curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/{}/runs?status=success&branch=main&per_page=1" | \
            jq -r '.workflow_runs[0].id')
          
          echo "Latest Windows successful run ID: $WINDOWS_RUN_ID"
          
          if [[ -z "$WINDOWS_RUN_ID" || "$WINDOWS_RUN_ID" == "null" ]]; then
            echo "Error: Could not find successful Windows build"
            exit 1
          fi
          
          # Find latest successful Linux workflow
          LINUX_RUN_ID=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows" | \
            jq -r '.workflows[] | select(.name=="Build Linux AppImage") | .id' | \
            xargs -I{} curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/{}/runs?status=success&branch=main&per_page=1" | \
            jq -r '.workflow_runs[0].id')
          
          echo "Latest Linux successful run ID: $LINUX_RUN_ID"
          
          if [[ -z "$LINUX_RUN_ID" || "$LINUX_RUN_ID" == "null" ]]; then
            echo "Error: Could not find successful Linux build"
            exit 1
          fi
          
          # Create directories
          mkdir -p windows-artifact linux-artifact release
          
          # Download Windows artifacts
          echo "Downloading Windows artifacts from run $WINDOWS_RUN_ID..."
          WINDOWS_ARTIFACTS=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$WINDOWS_RUN_ID/artifacts")
          
          # Get Windows artifact ID
          WINDOWS_ARTIFACT_ID=$(echo "$WINDOWS_ARTIFACTS" | jq -r '.artifacts[] | select(.name=="docuverse-windows") | .id')
          
          if [[ -z "$WINDOWS_ARTIFACT_ID" || "$WINDOWS_ARTIFACT_ID" == "null" ]]; then
            echo "Error: Could not find Windows artifact in run $WINDOWS_RUN_ID"
            echo "Available artifacts:"
            echo "$WINDOWS_ARTIFACTS" | jq -r '.artifacts[].name'
            exit 1
          fi
          
          # Download Windows artifact
          echo "Downloading Windows artifact ID: $WINDOWS_ARTIFACT_ID"
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$WINDOWS_ARTIFACT_ID/zip" \
            --output windows-artifact.zip
          
          # Download Linux artifacts
          echo "Downloading Linux artifacts from run $LINUX_RUN_ID..."
          LINUX_ARTIFACTS=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$LINUX_RUN_ID/artifacts")
          
          # Get Linux artifact ID
          LINUX_ARTIFACT_ID=$(echo "$LINUX_ARTIFACTS" | jq -r '.artifacts[] | select(.name=="docuverse-linux") | .id')
          
          if [[ -z "$LINUX_ARTIFACT_ID" || "$LINUX_ARTIFACT_ID" == "null" ]]; then
            echo "Error: Could not find Linux artifact in run $LINUX_RUN_ID"
            echo "Available artifacts:"
            echo "$LINUX_ARTIFACTS" | jq -r '.artifacts[].name'
            exit 1
          fi
          
          # Download Linux artifact
          echo "Downloading Linux artifact ID: $LINUX_ARTIFACT_ID"
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$LINUX_ARTIFACT_ID/zip" \
            --output linux-artifact.zip
          
          # Extract the artifacts
          unzip -q windows-artifact.zip -d windows-artifact
          unzip -q linux-artifact.zip -d linux-artifact
          
          # Check what we extracted
          echo "Windows artifact contents:"
          ls -la windows-artifact/
          echo "Linux artifact contents:"
          ls -la linux-artifact/
          
          # Copy files to release directory with consistent naming
          cp windows-artifact/*.zip release/docuverse-${{ env.VERSION }}-win64.zip || \
            cp $(find windows-artifact -name "*.zip") release/docuverse-${{ env.VERSION }}-win64.zip
          
          cp linux-artifact/*.AppImage release/docuverse-${{ env.VERSION }}-x86_64.AppImage || \
            cp $(find linux-artifact -name "*.AppImage") release/docuverse-${{ env.VERSION }}-x86_64.AppImage
          
          # Make the AppImage executable
          chmod +x release/docuverse-${{ env.VERSION }}-x86_64.AppImage
          
          # List the files that will be included in the release
          echo "Files for release:"
          ls -la release/
      
      - name: Prepare release files
        run: |
          # Create release directory
          mkdir -p release
          
          # Check what we downloaded
          echo "Windows artifact contents:"
          ls -la windows-artifact/
          echo "Linux artifact contents:"
          ls -la linux-artifact/
          
          # Move files to release directory with consistent naming
          cp $(find windows-artifact -name "*.zip") release/docuverse-${{ env.VERSION }}-win64.zip
          cp $(find linux-artifact -name "*.AppImage") release/docuverse-${{ env.VERSION }}-x86_64.AppImage
          
          # Make the AppImage executable
          chmod +x release/docuverse-${{ env.VERSION }}-x86_64.AppImage
          
          # List the files that will be included in the release
          echo "Files for release:"
          ls -la release/
      
      - name: Generate release notes
        run: |
          cat > release_notes.md << EOF
          # docuverse Q&A App Release v${{ env.VERSION }}
          
          This release provides both Windows and Linux executables for docuverse, a Q&A application for easy information retrieval from documents of interest.
          
          ## Windows Installation
          1. Download the ZIP file
          2. Extract the executable
          3. Run docuverse-${{ env.VERSION }}-win64.exe
          
          ## Linux Installation
          1. Download the AppImage
          2. Make it executable: \`chmod +x docuverse-${{ env.VERSION }}-x86_64.AppImage\`
          3. Run it: \`./docuverse-${{ env.VERSION }}-x86_64.AppImage\`
          EOF
          
          if [[ "${{ env.PRERELEASE }}" == "true" ]]; then
            cat >> release_notes.md << EOF
          
          ## Development Build
          This is an automated development build, not an official release.
          - Build date: $(date)
          EOF
          fi
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ env.PRERELEASE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
